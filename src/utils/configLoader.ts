import fs from 'fs';
import path from 'path';
import type { ComponentDocOptions } from '../types';

/**
 * Loads configuration from atomic-docs.config.js file
 * @returns Partial configuration object
 */
export async function loadConfig(): Promise<Partial<ComponentDocOptions>> {
  const configPath = path.resolve(process.cwd(), 'atomic-docs.config.js');

  try {
    if (fs.existsSync(configPath)) {
      // Use dynamic import for ESM compatibility
      const configModule = await import(configPath);
      return configModule.default || configModule;
    }
  } catch (error) {
    console.warn(`[atomic-docs] Could not load config file: ${error instanceof Error ? error.message : String(error)}`);
  }

  return {};
}

/**
 * Loads configuration from package.json
 * @returns Partial configuration object
 */
export function loadPackageConfig(): Partial<ComponentDocOptions> {
  try {
    const packagePath = path.resolve(process.cwd(), 'package.json');
    if (fs.existsSync(packagePath)) {
      const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
      return packageJson.atomicDocs || {};
    }
  } catch (error) {
    console.warn(`[atomic-docs] Could not load package.json: ${error instanceof Error ? error.message : String(error)}`);
  }

  return {};
}

/**
 * Creates a configuration file based on the provided options
 * @param options Options to save to the configuration file
 * @param outputPath Path where to save the configuration file
 */
export function createConfigFile(options: Partial<ComponentDocOptions>, outputPath: string = './atomic-docs.config.js'): void {
  try {
    // Extract relevant options for the watcher
    const config = {
      componentsDirName: options.componentsDirName,
      examplesDirName: options.examplesDirName,
      enableDocs: options.enableDocs,
      colors: options.colors,
      typography: options.typography,
      autoExtractColors: options.autoExtractColors,
      autoExtractTypography: options.autoExtractTypography,
      componentFont: options.componentFont,
      mainAppID: options.mainAppID,
      // We don't include dynamic imports like componentModules, rawComponentSourceModules, etc.
    };

    const configContent = `// Generated by vue-atomic-docs
export default ${JSON.stringify(config, null, 2)};
`;

    fs.writeFileSync(path.resolve(process.cwd(), outputPath), configContent);
    console.log(`[atomic-docs] Configuration saved to ${outputPath}`);
  } catch (error) {
    console.error(`[atomic-docs] Failed to create config file: ${error instanceof Error ? error.message : String(error)}`);
  }
}